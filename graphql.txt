# GraphQL: [[{protocol.graphql,qa.standards,api,protocol.client_server,data.integration,PM.low_code,PM.TODO]]

## KEY-POINT:
> STOP thinking about data in terms of resource URLs, secondary keys, or join tables;
> Think of data in terms of a graph of objects.

GraphQL:
* hierarchical query language. naturally following relationships between objects.
         "You can have nested objects and return all of them in one network call"
* Strict definitions for types, commands, and queries in a `graphql.schema` file.

* GraphQL: Facebook-developed protocol/language providing a powerful API
  to GET ONLY THE DATASET GRAPH WE NEED IN A SINGLE REQUEST.
* Replacement for REST and non-standandard ORM mapping tools.
* Offers (10x/100x) speed improvements.
* Removes the need for custom (vs DDBB) caches.

## When GraphQL is NOT for you [[{PM.risks]]
@[https://betterprogramming.pub/graphql-from-excitement-to-deception-f81f7c95b7cf]
* GraphQL doesn’t play well with documents.
* Types must be defined in both GraphQL, backend and mobile apps.
  Possible solutions include:
  1. Source Code ···> schema.graphql. Solutions include:
     * nexus: Discouraged, bloated, doesn't support federation, null values don't
              work properly.
     * typegraphql:
  2. schema.grpahql ···> source code. Solutions include:
     * Apollo (JS)
     * Ariadne (Python)
     * CodeGen: Works pretty well, but still with problems for nested objects.
               Typescripts ends ups writing really complex types.
     * ...
* NO SUPPORT FOR ERROR CODES: 404 not found, 400 bad requests, etc.,
  do not exists anymore. GraphQL forces to return 200 code and the
  error message in the response payload.

* Caching becomes complex as each query can be different even though
  it operates on the same entity.
  ...Libraries like Prisma and Dataloader have been developed to help
      with similar scenarios but are still far from REST abilities.

* Security Flaws:
  you can query exactly what you want leading to complex security implications.
  A malicious actor submiting an expensive nested query can trigger a DDoS attack.
  A malicious actor could also access fields that shouldn't be exposed.

  user {
    username <·· can be seen by everyone
    email    <·· private
    post {
      title  <·· maybe private
    }
  }

  Exxposing directly an internal database schema is even worst with
  GrahQL ORM tools like Prisma or Graphile.

* Inmature ecosystem:
  * four implementations just for Node.js (Apollo, Express, yoga, Helix)
  * six in Go
  * four in Python

"...  Facebook is still quite involved with tools like relay, yet they
 are not the final decision maker. The ecosystem now counts two other main players:
  * The Guild: OOSS group working on a yoda server, mesh, or codegen.
  * Apollo: private company open sourcing their server and clients (Kotlin, iOS, and React)
    but are selling training and SAAS features like apollo studio and managed federation.
  * smaller players: hasura.io, stepzen also offer SaaS solutions for GraphQL.
[[}]]



# GraphQL Reference Guide [[{]]
  Building Flexible and Understandable APIs
  https://www.infoq.com/articles/GraphQL-ultimate-guide/ 
[[}]]

# taxonomy: [[{]]
  https://2022.stateofgraphql.com/en-US/features/
  Language               Directives      Security & Performance      Other Features
    Customize Data         @skip           Persisted Queries           GraphQL Subscriptions
    Custom Directives      @include        Query Timeouts              Live Queries
    Custom Scalars         @deprecated     Query Rate Limiting         Apollo Federation
    Fragments              @specifiedBy    Query Depth Limiting        Schema Stitching
    Unions                 @defer          Query Cost Analysis
    Interfaces             @stream         Disabling Introspection
                                           IP Allow-listing
                                           Requiring Authentication

  Tools                       Combining Schemas
    GraphQL Servers             Apollo Federation
    GraphQL Clients             Schema Stitching
    API     Generators          GraphQL Modules
    Schema  Builders            Hasura Data Fedration
                                GraphQL Mesh
                                WunderGraph
                                StepZen
                                MuleSoft

* Federation ("Apollo") assumes a company’s schema should be a distributed responsibility.
  ```
    User       Products    Reviews
  Subgraph     Subgraph    Subgraph
     ^            ^           ^
     ·            ·           ·
     └········ Gateway ·······┘
                  ^
                  ·
              Web/MobileApp
  ```

* Stitching (backed by mesh, hasura, or stepzen) assumes a company's schema should be
  a centralized responsibility.

   SQL   gRPC  OpenAPI   MQ   <···  define single main GraphQL schema on
    ^     ^       ^      ^          the gateway and use a resolver to fetch
    ·     ·       ·      ·          data automatically from each service
    └·········v··········┘
              ·
            GraphQL

   """ ... Stitching is more flexible than federation because it doesn't force
    sub-services to use GraphQL. However I found that it tends to send you
    toward darker paths ...
[[}]]


# Hasura GraphQL Engine [[{data.analytics,PM.low_code,PM.low_code,QA.UX,PM.TODO]]
(Related: https://github.com/facebook/relay, similar but React focused)
* Blazing fast, instant realtime GraphQL APIs for DB with fine
  grained access control, also trigger webhooks on database events.
* POLE POSITION in GitHub for Top 32 Automatic API OOSS Projects
  https://awesomeopensource.com/projects/automatic-api
* Example:
  PostgreSQL data                   GraphQL SUBSCRIPTION                      UI (Web, Mobile, ...)

  ORDERS TABLE                       subscription fetchOrder {    ··········> event pushed to update UI
  ==============================       orders ( where:
  order_id |payment | dispatched                 {id: {_eq: 'XX_11'}}) {
  ---------+--------+-----------         id
  XX-11    |true    | true               payment
  ---------+--------+-----------         dispatched
  ...                                  }
                                     }
[[}]]

## Mock Service Worker [[{]]
   https://github.com/mswjs/msw
  seamless REST/GraphQL API mocking library for browser and Node.js.
[[}]]

# Netflix Open Sources Their Domain Graph Service Framework:
  GraphQL for Spring Boot
  https://www.infoq.com/news/2021/02/netflix-graphql-spring-boot

# GraphQL vs REST:
https://hackernoon.com/graphql-vs-rest-how-to-choose-one-over-the-other
  Conclusion
  GraphQL is great for applications where related and nested data are
  fetched because you can use the full power of its query
  language. GraphQL is also well suited for mobile development as
  bandwidth usage is optimized by avoiding over-fetching and
  under-fetching. But after weighing the pros and cons, we see that
  GraphQL is not always the best option. If you need a clear and
  convenient API without overhead, or you want to use HTTP capabilities
  like caching or authentication, you should choose REST.

# PayPal Adopts GraphQL: Gains Increased Developer Productivity
  https://www.infoq.com/news/2021/10/paypal-graphql/

  Today, GraphQL is being used by several production apps across
  PayPal. It is now a default pattern to use GraphQL for building new
  UI apps. Many existing apps are in the process of migrating to
  GraphQL. GraphQL is being used by common platforms such as Identity,
  Payments, and Compliance to provide a consistent experience across
  all PayPal products. Our API developers have started using GraphQL to
  build APIs. Braintree released its public GraphQL API.

  Kapoor reports that PayPal sees many advantages with using GraphQL. A
  primary benefit is developer productivity. Tools like GraphiQL and
  Playground help increase productivity by allowing developers to play
  around with the API and explore documentation. Increased
  productivity, in turn, helps shipping faster. Kapoor elaborates:
  We were able to get rid of a lot of plumbing that made it harder to
  provide feature updates and keep feature parity. Before, we had to
  ship out an SDK in every language that our merchant worked in. Now,
  we can provide one single GraphQL endpoint that merchants can
  integrate with no matter which language they use.

# hasura/graphql-engine:  [[{PM.low_code]]
https://github.com/hasura/graphql-engine

- accelerates API development 10x
- Autogenerate GraphQL or REST APIs with
  built in authorization from (ddbb) data, instantly.
- powerful queries with Built-in filtering / pagination / pattern
  search / bulk insert / update / delete mutations
- Works with existing, live databases. 1-minute setup for
  ready-to-use GraphQL API
- Realtime: Convert any GraphQL query to a live query by using
  subscriptions
- Merge remote schemas: Access custom GraphQL schemas for business
  logic via a single GraphQL Engine endpoint.
- Extend with Actions: Write REST APIs to extend Hasura’s schema with
  custom business logic.
- Trigger webhooks or serverless functions: On Postgres
  insert/update/delete events
- Scheduled Triggers: Execute custom business logic at specific
  points in time using a cron config or a one-off event.
- Fine-grained access control: Dynamic access control that integrates
  with your auth system (eg: auth0, firebase-auth)
- Admin UI & Migrations: Admin UI & Rails-inspired schema migrations
- Supports PostgreSQL (and its flavours), MS SQL Server, Big Query.
  more databases coming soon.
[[}]]

# Federated GraphQL with Apollo
  https://www.infoq.com/presentations/graphql-major-league-baseball/

# GraphQL taxonomy:  [[{]]
  Software teams adopt GraphQL to accelerate feature delivery and
  improve the developer experience. But as adoption grows, companies
  struggle with scaling GraphQL across teams. The solution to scaling
  GraphQL is a single, unified data graph federated across multiple
  teams. A federated graph provides consistency and stability for the
  organization while empowering teams to go faster and adapt the graph
  over time. Teams also benefit from shared infrastructure and
  learnings. This e-book covers the key considerations for
  consolidating to a federated graph.

  What you’ll learn:
      Why and when you should consolidate your GraphQL efforts into a unified graph
      How consolidation helps scale GraphQL across your company
      How to become a Graph Champion to ensure successful rollout of your graph
      How to design a consolidated architecture with Federation
      Federated schema design best practices
[[}]]

## what-is-graphql [[{]]
  https://www.redhat.com/en/topics/api/what-is-graphql
  The purpose of this monorepo is to give the GraphQL Community:
      a to-specification official language service (see: API Docs)
      a comprehensive LSP server and CLI service for use with IDEs
      a codemirror mode
      a monaco mode (in the works)
      an example of how to use this ecosystem with GraphiQL.
      examples of how to implement or extend GraphiQL.
[[}]]

# Apollo GraphQL  [[{ENTERPRISE_PATTERNS.OPTIMIZATION]]
* Schema Combiner:
@[https://www.apollographql.com/]
* Simplify app development by combining APIs, databases and microservices
  into a single data graph that can be queried with GraphQL.

@[https://www.infoq.com/news/2020/06/apollo-platform-graphql/]
  Apollo Data Graph Platform: A GraphQL Middleware Layer for the Enterprise
[[}]]

## GraphQL Code Generator (10.1k starts) [[{]]
https://github.com/dotansimha/graphql-code-generator
- Automatically generates code out of GraphQL schema and Documents.
  (query/mutation/subscription/fragment).
- frontend or backend,
[[}]]


