● MongoDB Summary   [[{db_engine.document_store.mongo]] #[mongo_summary]
• 14 Things I Wish I’d Known When Starting with MongoDB [[{01_PM.TODO}]]
  https://www.infoq.com/articles/Starting-With-MongoDB

$ mongo                                  ← Launch mongo shell
# show dbs                               ← list all databases
# use db_name                            ← create/ login to a database
# db.createCollection('collection01')    ← create collection
# db.collection01.insert( [              ← Insert N documents
    { key1: "val11", key2:"val21", },      db.collection.insertOne()
    { key1: "val12", key2:"val22", },      db.collection.insertMany()
    { key1: "val13", key2:"val23", }
  ]);
# db.collection01.save(                  ← Upsert doc.
    { key1: "newVal", ... },
  );
# db.collection01.update()               ← Update 1+ docs. in collection based on
                                           matching document and based on multi option

# db.collection01.update(                ← updateOne()|updateMany()
     { key1: val11 },                    ← query to match
     { $set: { key2 : val2} },           ← update with 
     { multi: true}                      ← options
  );

# db.collection01                        ← Update single document.
  .findOneAndUpdate(
    filter, 
    update,
    options)                             ← Options:
                                           upsert=true|false
                                           returnNewDocument: true: return new doc
                                           (vs original).
                                           upsert==true ⅋⅋ returnNewDocument==false:
                                           → return null.

# db.collecti01.findOne( { _id  : 123 });← Find by ID
# db.collecti01.findOne( { key1 : val1});       by query 
# db.collecti01.findOne(                 ← Find with projection 
     { key1 : val1},                       (limiting the fields to return)
     { key2: 1}      );                    ←  returns id , key2 fields only


# db.collecti01.find( {...} )            ← Returns cursor with selected docs.

# db.collecti01.deleteOne( filter, opts) ← or deleteMany(filter, opts)


• MONGODB READ-CONCERN LEVELS:  [[{db_engine.101]]
- Control consistency and isolation properties of data reads 
  ( from replica sets & replica set shards ).
  LOCAL       : returns data from instace without guaranteing that
                its been written to majority of replica members
                (Default for reads against primary)
  AVAILABLE   : similar to local, gives lowest latancy for sharded collections.
                (Default for reads against secondaries)
  MAJORITY    : returns only if the data acknowledged by a majority of 
                the replica set members.
  LINEARIZABLE: return data after all successful majority-acknowledged 
                writes
  SNAPSHOT    : Only available for transactions on multi documents.

• MONGODB WRITE CONCERN LEVELS:  
  - Control level of acknowledgment for a given write operation
    sent to mongod and mongos (for sharded collections)

  - fields spec:
    - w       : (number),
      0 : No ACK requested
      1 : (default) wait ACK from standalone mongod|primary(replica set)
      2+:           wait ACK from primary + given N-1 secondaries
    - j : (bool)    
      true => return ACK only after real writte onto on-disk journal
    - wtimeout: millisecs before returning error.
[[}]]

 WARN: On failure MongoDB does not rollback the data, data may eventually get stored.
• MongoDB INDEXES:
  _id Index (Default index, can NOT be dropped)
  1. Single Field:
  2. Multikey Field:
  3. Geospatial Index:
  4. Text Indexes:
  9. Aggregations
  1. Aggregation Pipeline
  2. Map-Reduce
  3. Single Purpose
[[}]]
